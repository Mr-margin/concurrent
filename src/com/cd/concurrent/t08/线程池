FixedThreadThread
  容量固定的线程池，活动状态和线程池容量是有上限的线程池。所有的线程池中，都有一个任务队列，使用的是BlockingQueue<Runnable>作为任务的载体
当任务数量大于线程池容量的时候，没有运行的任务保存在任务队列中，当线程有空闲的，自动从队列中取出任务执行。
    使用场景：大多数情况下，使用的线程池，首选FixedThreadPool。OS系统和硬件是有线程支持上限。不能随意的无限制提供线程池。
    线程池默认的容量上限是Integer.MAX_VALUE。
    常见的线程池容量：PC - 200.  服务器 -- 1000-10000
    queued.tasks -- 任务队列
    completed.tasks -- 结束任务队列


CachedThreadPool
    缓存的线程池，容量不限（Integer.MAX_VALUE）。自动扩容，容量管理策略；如果线程池中的线程数量不满足任务执行，创建新的线程，
每次有新任务无法即时处理的时候，都会创建新的线程，当线程池中的线程空闲时长达到一定的临界值（默认60s），自动释放线程。
    默认线程空闲60秒，自动摧毁。
    应用场景：内部应用或测试应用，内部应用，有条件的内部数据瞬间处理时应用，如：电信平台夜间执行数据整理（有把握
在短时间内处理完成所有工作，且对硬件和软件有足够的信心）。测试应用，在测试的时候，尝试得到硬件或软件的最高负载量，用于提供FixedThreadPool容量的指导。


ScheduledThreadPool
    计划任务线程池，可以根据计划自动执行任务的线程池
    scheduleAtFixedRate(Runnable,start_limit,,limit,timeunit)
    Runnable - 要执行的任务
    start_limit - 第一次任务执行的间隔
    limit - 多次任务执行的间隔
    timeunit - 多次任务执行间隔的时间单位
    使用场景： 计划任务时选用（DelaydQueue）,如：电信行业中的数据整理，每分钟整理，每小时整理，每天整理。


SingleThreadExecutor
    单一容量线程
    使用场景：保证任务顺序时使用，如：游戏大厅中的公共频道聊天


ForkJoinPool
    分支合并线程池（mopduce类似的设计思想）。适合用于处理复杂任务。
    初始化线程容量与CPU核心相关。
    线程池中运行的内容必须是 ForkJoinTask 的子类型（RecursiveTask，RecursiveAction）。
    ForkJoinPoll - 分支合并线程池。可以递归完成复杂任务。要求可分支合并的任务必须是ForkJoinTask类型的子类型，其中提供了分支合并的能力。
ForkjoinTask类型提供了两个抽象子类型，RecursiveTask有返回结果的分支合并任务，RecursiveAction无返回结果的分支合并任务。（Callable/Runnable)
    compute()方法:任务的执行逻辑
    ForkjoinPool没有所谓的容量。默认都是1个线程。根据任务自动分支新的子线程、当子线程任务结束后，自动合并。所谓自动就是根据fork和join两个方法实现的。
    应用：主要是做科学计算或天文计算的。数据分析。

ThreadPoolExecutor
    线程池底层实现。除了 ForkJoinPoll外，其他常用线程池底层都是使用 ThreadPollExecutor实现的
    public ThreadPoolExecutor (
        int corePoolSize,//核心容量，创建线程池的时候，默认有多少线程。也就是线程池保持的最少线程数
        int maximumPoolSize,//最大容量，线程池最多有多少个线程
        long keepAliveTime,//生命周期，0为永久
        TimeUnit unit,//生命周期单位，毫秒、秒
        BlockingQueue<Runnable> workQueue //任务队列，阻塞队列，注意，泛型必须是Runnable。
        )
    使用场景：默认提供的线程池不满足条件使用。如：初始线程数据 4，最大线程数 200 ，线程空闲周期30秒。




